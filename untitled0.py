# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gkZ-EG4AbEai-f_21SooxL_6LspjNvcZ
"""

!pip install streamlit yfinance plotly

import streamlit as st
import pandas as pd
import yfinance as yf
from datetime import datetime, timedelta
from sklearn.preprocessing import StandardScaler
import plotly.express as px

# Set the page configuration for a wide layout
st.set_page_config(layout="wide")

# --- App Title and Description ---
st.title("ðŸ“ˆ BTC vs. S&P 500 Normalized Performance")
st.markdown("""
This dashboard fetches the last 10 years of historical data for Bitcoin (BTC-USD) and the S&P 500 Index (^GSPC).
It then standardizes the closing prices to compare their normalized performance on the same scale.
""")

# --- Data Loading and Processing ---
# Use st.cache_data to avoid refetching data on every interaction
@st.cache_data
def load_and_process_data():
    """
    Fetches, processes, scales, and merges BTC and S&P 500 data.
    """
    # 1. Defining date ranges (last 10 years)
    today = datetime.today() + timedelta(1)
    f_years = today - timedelta(days=365*10)

    # 2. Fetch BTC data
    btc_hist = yf.Ticker('BTC-USD').history(start=f_years, end=today)
    btc_df = pd.DataFrame(btc_hist)
    btc_df.reset_index(inplace=True)
    btc_df['Date'] = pd.to_datetime(btc_df['Date']).dt.date

    # 3. Fetch S&P500 data
    sp500_hist = yf.Ticker('^GSPC').history(start=f_years, end=today)
    sp500_df = pd.DataFrame(sp500_hist)
    sp500_df.reset_index(inplace=True)
    sp500_df['Date'] = pd.to_datetime(sp500_df['Date']).dt.date

    # 4. Standardize both data using StandardScaler
    scaler = StandardScaler()

    # Scale BTC 'Close' price
    btc_df_scaled = pd.DataFrame(scaler.fit_transform(btc_df[['Close']]), columns=['Close'])
    btc_df_scaled['Date'] = btc_df['Date']

    # Scale S&P500 'Close' price
    sp500_df_scaled = pd.DataFrame(scaler.fit_transform(sp500_df[['Close']]), columns=['Close'])
    sp500_df_scaled['Date'] = sp500_df['Date']

    # 5. Merge dataframes for comparison
    btc_df_scaled.set_index('Date', inplace=True)
    sp500_df_scaled.set_index('Date', inplace=True)

    btc_df_scaled.rename(columns={'Close': 'BTC_close'}, inplace=True)
    sp500_df_scaled.rename(columns={'Close': 'SP500_close'}, inplace=True)

    # Inner merge ensures we only compare dates where both markets were open
    stock = pd.merge(btc_df_scaled, sp500_df_scaled, left_index=True, right_index=True, how='inner')
    stock.reset_index(inplace=True)
    stock.sort_values(by='Date', inplace=True)

    return stock, btc_df, sp500_df

# Load the data using the cached function
try:
    processed_data, btc_raw_data, sp500_raw_data = load_and_process_data()

    # --- Interactive Visualization ---
    st.header("Performance Comparison Chart")

    # Reshape the dataframe for easier plotting with Plotly Express
    stock_melted = processed_data.melt(id_vars=['Date'], value_vars=['BTC_close', 'SP500_close'],
                                    var_name='Asset', value_name='Normalized Price')
    stock_melted['Asset'] = stock_melted['Asset'].replace({'BTC_close': 'Bitcoin', 'SP500_close': 'S&P 500'})

    # Create an interactive line chart
    fig = px.line(stock_melted,
                x='Date',
                y='Normalized Price',
                color='Asset',
                title='Normalized Performance: Bitcoin vs. S&P 500',
                labels={'Normalized Price': 'Standardized Close Price', 'Date': 'Date'},
                color_discrete_map={'Bitcoin': 'red', 'S&P 500': 'blue'},
                template='plotly_white')

    fig.update_layout(
        xaxis_title='Time',
        yaxis_title='Price (Normalized)',
        legend_title='Asset'
    )

    st.plotly_chart(fig, use_container_width=True)

    # --- Data Display ---
    st.markdown("---")
    st.header("Underlying Data")

    with st.expander("View Merged & Normalized Data"):
        st.dataframe(processed_data)

    with st.expander("View Raw Bitcoin Data"):
        st.dataframe(btc_raw_data)

    with st.expander("View Raw S&P 500 Data"):
        st.dataframe(sp500_raw_data)

except Exception as e:
    st.error(f"An error occurred while fetching or processing data: {e}")
    st.warning("This may be due to a temporary issue with the yfinance API. Please try again later.")